{"version":3,"sources":["Components/Pictures/octocat.png","Components/Pictures/RoboFriends.png","Components/Pictures/site.png","Components/Contact.js","Components/Home.js","Components/Projects.js","Components/Chess.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","className","rel","target","href","alt","src","require","Home","to","Projects","CardDeck","Card","Text","ButtonGroup","Button","variant","Footer","Chess","App","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,qC,wCCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mMCe5BC,G,MAbC,WACZ,OACA,yBAAKC,UAAU,kBACf,6BACI,wBAAIA,UAAU,WAAd,uBAAgD,uBAAIC,IAAI,sBAAsBC,OAAO,SAASC,KAAK,+BACnG,yBAAKC,IAAI,SAASJ,UAAU,MAAMK,IAAKC,EAAQ,OAC/C,4BAAI,6BAAJ,gC,QCaOC,EAfF,WACT,OACA,yBAAKP,UAAU,mBACf,kBAAC,IAAD,KACI,qCACA,6BADA,OAEA,6BAFA,mBAIA,kBAAC,IAAD,CAAMQ,GAAG,YAAYR,UAAU,YAA/B,eACA,kBAAC,EAAD,S,iDCiCOS,G,MAxCE,WACb,OACA,yBAAKT,UAAU,eACf,kBAAC,IAAD,KACI,wBAAIA,UAAU,+BAAd,cACW,8BAEX,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAKP,IAAI,cAAcC,IAAKC,EAAQ,MACpC,kBAACK,EAAA,EAAKC,KAAN,KACI,+CAAwB,6BACxB,yDAA8B,6BAA9B,8BAA8D,6BAA9D,iDAEJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQZ,OAAO,SAASC,KAAK,0CAA0CY,QAAQ,aAA/E,QACJ,kBAACD,EAAA,EAAD,CAAQZ,OAAO,SAASC,KAAK,2CAA7B,gBACA,kBAACQ,EAAA,EAAKK,OAAN,KACA,2BAAOhB,UAAU,cAAjB,kBAGJ,kBAACW,EAAA,EAAD,KACI,yBAAKP,IAAI,cAAcC,IAAKC,EAAQ,MACpC,kBAACK,EAAA,EAAKC,KAAN,KACI,4CAAqB,6BACrB,6CAAkB,6BAAlB,oCAAyD,6BAAzD,sBAEJ,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAQZ,OAAO,SAASC,KAAK,kDAA7B,gBACA,kBAACQ,EAAA,EAAKK,OAAN,KACA,2BAAOhB,UAAU,cAAjB,uBCpBDiB,G,MAdD,WACV,OACI,yBAAKjB,UAAU,SACf,kBAAC,IAAD,KACA,wBAAIA,UAAU,SAAd,SAA4B,6BAA5B,gBACA,wBAAIA,UAAU,UAAd,eACA,wBAAIA,UAAU,QAAQ,uBAAGA,UAAU,OAAOG,KAAK,qCAAqCD,OAAO,SAArE,0BACtB,wBAAIF,UAAU,QAAQ,uBAAGA,UAAU,OAAOG,KAAK,qDAAqDD,OAAO,SAArF,mCAAoI,6BAAM,6BAChK,wE,QCUOgB,G,uLAZT,OACF,yBAAKlB,UAAU,OACf,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,YAAYC,UAAWZ,IACzC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,SAASC,UAAWJ,U,GAPxBK,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a4e0cd8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/octocat.a9ee2a5b.png\";","module.exports = __webpack_public_path__ + \"static/media/RoboFriends.bdda52a3.png\";","module.exports = __webpack_public_path__ + \"static/media/site.91621291.png\";","import React from 'react';\r\n\r\nconst Contact = () => {\r\n    return (\r\n    <div className='f-desc pa fs-m'>\r\n    <br />\r\n        <h1 className='contact'>See what I am doing</h1><a  rel='noreferrer noopener' target='_blank' href='https://github.com/CalebZim'>\r\n        <img alt='Github' className='img' src={require(\"./Pictures/octocat.png\")} /></a>\r\n        <h4><br />\r\n         Â© 2020 Caleb Zimmerman\r\n        </h4>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport './Home.css'\r\nimport Contact from './Contact'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    return (\r\n    <div className='Title fs-m pa-2'>\r\n    <Zoom >\r\n        <h1>Hello,\r\n        <br />I am\r\n        <br />Caleb Zimmerman\r\n        </h1>\r\n        <Link to='/Projects' className='projects'>My Projects</Link>\r\n        <Contact />\r\n        </Zoom>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Zoom from 'react-reveal/Fade';\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport './Projects.css'\r\n\r\nconst Projects = () => {\r\n    return (\r\n    <div className='Projects pa'>\r\n    <Zoom >\r\n        <h3 className='Title title-size  fs-l c-lb'>\r\n        My Projects<br />\r\n        </h3>\r\n        <CardDeck>\r\n            <Card>\r\n                <img alt=\"RoboFriends\" src={require(\"./Pictures/RoboFriends.png\")} />\r\n                <Card.Text>\r\n                    <h1>RoboFriends App</h1><br />\r\n                    <h4>This app fetches the users<br/> and pictures from an api. <br/>You can search for a user in the search bar.</h4>\r\n                </Card.Text>\r\n                <ButtonGroup >\r\n                    <Button target='_blank' href='https://calebzim.github.io/robofriends/' variant=\"secondary\">Live</Button>\r\n                <Button target='_blank' href='https://github.com/CalebZim/robofriends'>Source Code</Button></ButtonGroup>\r\n                <Card.Footer>\r\n                <small className=\"text-muted\">Made in 2019</small>\r\n                </Card.Footer>\r\n            </Card>\r\n            <Card>\r\n                <img alt=\"RoboFriends\" src={require(\"./Pictures/site.png\")} />\r\n                <Card.Text>\r\n                    <h1>This Website</h1><br />\r\n                    <h4>This app uses <br />react-boostrap, react-router-dom,<br />and react-reveal.</h4>\r\n                </Card.Text>\r\n                <ButtonGroup >\r\n                <Button target='_blank' href='https://github.com/CalebZim/CalebZim.github.io'>Source Code</Button></ButtonGroup>\r\n                <Card.Footer>\r\n                <small className=\"text-muted\">Made in 2020</small>\r\n                </Card.Footer>\r\n            </Card>\r\n\r\n        </CardDeck>\r\n    </Zoom>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport './Chess.css'\r\n\r\nconst Chess = () => {\r\n    return (\r\n        <div className='chess'>\r\n        <Zoom >\r\n        <h1 className='title'>Hello <br/>I play chess</h1>\r\n        <h1 className='title2'>My Accounts</h1>\r\n        <h2 className='acct' ><a className='acct' href='https://www.chess.com/member/cdzim' target='blank'> Chess.com:     cdzim</a></h2>\r\n        <h2 className='acct' ><a className='acct' href='https://www.chesskid.com/members/view/BigSuddenMix' target='blank'>ChessKid.com:     BigSuddenMix</a></h2><br /><br />\r\n        <h1>Thank You for viewing my chess site.</h1>\r\n        </Zoom>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chess;","import React, { Component } from 'react';\nimport Home from './Components/Home';\nimport Projects from './Components/Projects';\nimport Chess from './Components/Chess'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n      return (\n    <div className=\"App\">\n    <Router>\n    <Route exact path='/' component={Home} /> \n    <Route exact path='/Projects' component={Projects} /> \n    <Route exact path='/Chess' component={Chess} /> \n    </Router>\n    </div>\n  );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'tachyons'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}